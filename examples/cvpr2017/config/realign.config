### realignment of frames to subactions on the training data ###

action                      = realignment
log-file                    = log/realign.iter-2.log

[viterbi-decoding]
output                      = labels

[scorer]
type                        = framewise-neural-network-scorer
batch-size                  = 512
prior-file                  = results/iter-2/prior.vector
prior-scale                 = 1.0
logarithmize-network-output = false

[grammar]
type                        = single-path

[hidden-markov-model]
type                        = standard-hmm
model-file                  = results/iter-2/hmm_definition.vector
transition-probability-file = results/iter-2/transition_probabilities.vector

[features.feature-reader]
feature-cache               = data/split1.train.bin
buffer-size                 = 1
preprocessors               = windowing

[windowing]
type                        = windowing
window-size                 = 21

[features.label-reader]
feature-cache               = data/split1.train.transcripts

[features.label-writer]
feature-cache               = /dev/null         # we create the new hmm file from the log file

include config/network.config

[neural-network]
load-model-from             = results/iter-2

[neural-network.output-layer]
type                        = identity          # omit softmax -> obtain logarithmized network output
